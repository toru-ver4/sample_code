DEFINE_UI_PARAMS(h_center_pos, Picker H Pos, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(v_center_pos, Picker V Pos, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(h_info_pos, Debug Info H Pos, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(v_info_pos, Debug Info V Pos, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.001)
DEFINE_UI_PARAMS(font_size_rate, Font Size Ratio, DCTLUI_SLIDER_INT, 20, 1, 100, 1)
DEFINE_UI_PARAMS(integer_digits_ui, Integer Digits, DCTLUI_SLIDER_INT, 1, 1, 5, 1)
DEFINE_UI_PARAMS(decimal_digits_ui, Decimal Digits, DCTLUI_SLIDER_INT, 3, 1, 7, 1)

__CONSTANT__ float3 cross_hair_color = {1.0, 0.0, 1.0};
__CONSTANT__ float3 seven_seg_color = {0.5, 0.5, 0.5};
__CONSTANT__ int digit_to_mask[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
#define TEXT_PERIOD_MASK (0x80)

__DEVICE__ int draw_cross_hair(int p_Width, int p_Height, int p_X, int p_Y, float3 *rgb, float h_center_pos, float v_center_pos)
{
    float3 *line_color = &cross_hair_color;

    float cross_hair_rate = 0.025;
    int line_width = 3;
    int h_pos = int(h_center_pos * p_Width + 0.5);
    int h_pos_st = int(h_pos - p_Height * cross_hair_rate);
    int h_pos_ed = int(h_pos + p_Height * cross_hair_rate);
    int v_pos = int(v_center_pos * p_Height + 0.5);
    int v_pos_st = int(v_pos - p_Height * cross_hair_rate);
    int v_pos_ed = int(v_pos + p_Height * cross_hair_rate);

    // h-line
    if((h_pos_st <= p_X) && (p_X < h_pos_ed)){
        if(((v_pos - line_width) <= p_Y) && (p_Y < (v_pos + line_width))){
            rgb->x = line_color->x;
            rgb->y = line_color->y;
            rgb->z = line_color->z;
        }
    }

    if((v_pos_st <= p_Y) && (p_Y < v_pos_ed)){
        if(((h_pos - line_width) <= p_X) && (p_X < (h_pos + line_width))){
            rgb->x = line_color->x;
            rgb->y = line_color->y;
            rgb->z = line_color->z;
        }
    }
    return 0;
}


__DEVICE__ int draw_rectangle(int p_Width, int p_Height, int p_X, int p_Y, float3 *rgb, float2 st_pos, float2 ed_pos, float3 *line_color)
{
    if((st_pos.x <= p_X) && (p_X < ed_pos.x)){
        if((st_pos.y <= p_Y) && (p_Y < ed_pos.y)){
            rgb->x = line_color->x;
            rgb->y = line_color->y;
            rgb->z = line_color->z;
        }
    }

    return 0;
}


__DEVICE__ int draw_single_digit(int p_Width, int p_Height, int p_X, int p_Y, float3 *rgb, float2 g_st_pos, int r_height, int r_width, int d_mask, float3 *line_color)
{
    float2 st_pos;
    float2 ed_pos;

    // A
    if((d_mask & 0x01) == 0x01){
        st_pos = make_float2(g_st_pos.x + r_height, g_st_pos.y);
        ed_pos = make_float2(st_pos.x + r_width, st_pos.y + r_height);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // B
    if((d_mask & 0x02) == 0x02){
        st_pos = make_float2(g_st_pos.x + r_height + r_width, g_st_pos.y + r_height);
        ed_pos = make_float2(st_pos.x + r_height, st_pos.y + r_width);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // C
    if((d_mask & 0x04) == 0x04){
        st_pos = make_float2(g_st_pos.x + r_height + r_width, g_st_pos.y + r_height * 2 + r_width);
        ed_pos = make_float2(st_pos.x + r_height, st_pos.y + r_width);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // D
    if((d_mask & 0x08) == 0x08){
        st_pos = make_float2(g_st_pos.x + r_height, g_st_pos.y + (r_height + r_width) * 2);
        ed_pos = make_float2(st_pos.x + r_width, st_pos.y + r_height);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // E
    if((d_mask & 0x10) == 0x10){
        st_pos = make_float2(g_st_pos.x, g_st_pos.y + r_height * 2 + r_width);
        ed_pos = make_float2(st_pos.x + r_height, st_pos.y + r_width);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // F
    if((d_mask & 0x20) == 0x20){
        st_pos = make_float2(g_st_pos.x, g_st_pos.y + r_height);
        ed_pos = make_float2(st_pos.x + r_height, st_pos.y + r_width);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // G
    if((d_mask & 0x40) == 0x40){
        st_pos = make_float2(g_st_pos.x + r_height, g_st_pos.y + r_height + r_width);
        ed_pos = make_float2(st_pos.x + r_width, st_pos.y + r_height);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    // H
    if((d_mask & 0x80) == 0x80){
        st_pos = make_float2(g_st_pos.x, g_st_pos.y + (r_height + r_width) * 2);
        ed_pos = make_float2(st_pos.x + r_height, st_pos.y + r_height);
        draw_rectangle(p_Width, p_Height, p_X, p_Y, rgb, st_pos, ed_pos, line_color);
    }

    return 0;
}


__DEVICE__ int draw_digits(int p_Width, int p_Height, int p_X, int p_Y, float3 *rgb, float draw_value, int integer_digits, int decimal_digits, float2 g_st_pos, int r_height, int r_width, float3 *font_color)
{
    int ii;
    int text_width = r_width + r_height * 4;
    int text_width_period = r_height * 4;
    int draw_value_10x;

    float2 st_pos = g_st_pos;
    st_pos.x -= r_width;  // To neutralize the effect of the initial offset calculation in the for loop.
    for(ii=0; ii<integer_digits; ii++){
        st_pos.x += text_width;
        draw_single_digit(p_Width, p_Height, p_X, p_Y, rgb, st_pos, r_height, r_width, 0x7F, font_color);
    }

    st_pos.x += text_width;
    draw_single_digit(p_Width, p_Height, p_X, p_Y, rgb, st_pos, r_height, r_width, TEXT_PERIOD_MASK, font_color);
    st_pos.x += text_width_period;

    for(ii=0; ii<decimal_digits; ii++){
        draw_single_digit(p_Width, p_Height, p_X, p_Y, rgb, st_pos, r_height, r_width, 0x7F, font_color);
        st_pos.x += text_width;
    }

    return 0;
}


// main function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
    float3 out;
    float r = _tex2D(p_TexR, p_X, p_Y) * 0.5f;
    float g = _tex2D(p_TexG, p_X, p_Y) * 0.5f;
    float b = _tex2D(p_TexB, p_X, p_Y) * 0.5f;
    out = make_float3(r, g, b);

    draw_cross_hair(p_Width, p_Height, p_X, p_Y, &out, h_center_pos, v_center_pos);

    float rectangle_width_rate = 0.05;
    float rectangle_height_rate = 0.01;
    float2 st_pos;
    float2 ed_pos;
    st_pos.x = p_Width * h_info_pos;
    st_pos.y = p_Height * v_info_pos;
    ed_pos.x = st_pos.x + p_Height * rectangle_width_rate;
    ed_pos.y = st_pos.y + p_Height * rectangle_height_rate;

    // draw_rectangle(p_Width, p_Height, p_X, p_Y, &out, st_pos, ed_pos, &seven_seg_color);

    // float2 digit_st_pos = make_float2(0, 0);
    float3 font_color = make_float3(1.0, 1.0, 0.0);
    const float font_size_int_max = 100.0;  // It is the same value with max value of the `font_size_rate`
    int r_height = int(float(p_Height * font_size_rate) / (font_size_int_max * 60.0f) + 0.5f);
    int r_width = r_height * 5;
    int text_one_width = r_width + r_height * 4;
    int text_one_width_dot = r_height * 4;

    draw_digits(p_Width, p_Height, p_X, p_Y, &out, 12.345, integer_digits_ui, decimal_digits_ui, st_pos, r_height, r_width, &font_color);

//    int d_mask = digit_to_mask[9];
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = TEXT_PERIOD_MASK;
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[8];
//    st_pos.x = st_pos.x + text_one_width_dot;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[7];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[6];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[5];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[4];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[3];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[2];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[1];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);
//
//    d_mask = digit_to_mask[0];
//    st_pos.x = st_pos.x + text_one_width;
//    draw_single_digit(p_Width, p_Height, p_X, p_Y, &out, st_pos, r_height, r_width, d_mask, &font_color);

    return out;
}
