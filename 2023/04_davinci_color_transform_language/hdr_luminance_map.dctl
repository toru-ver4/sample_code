#include "ty_color_lib.h"
#include "ty_draw_lib.h"
#include "color_map_data.h"

#define JUDGE_METHOD_RGB2Y   (0)
#define JUDGE_METHOD_MAX_RGB (1)

#define OVER_RANGE_COLOR_M   (0)
#define OVER_RANGE_COLOR_Y   (1)
#define OVER_RANGE_COLOR_C   (2)

__CONSTANT__ float3 over_range_color_m_3f = {1.0f, 0.3f, 1.0f};
__CONSTANT__ float3 over_range_color_y_3f = {1.0f, 1.0f, 0.4f};
__CONSTANT__ float3 over_range_color_c_3f = {0.7f, 1.0f, 1.0f};

DEFINE_UI_PARAMS(gamut_idx, Timeline Color Gamut, DCTLUI_COMBO_BOX, 2, { GAMUT_IDX_BT709, GAMUT_IDX_P3D65, GAMUT_IDX_BT2020 }, { Rec.709, P3-D65, Rec.2020 })
DEFINE_UI_PARAMS(judge_data_idx, Judgment Data Type, DCTLUI_COMBO_BOX, 0, { JUDGE_METHOD_RGB2Y, JUDGE_METHOD_MAX_RGB }, { Luminance_RGB2Y, Max_Value_Among_RGB })
DEFINE_UI_PARAMS(over_range_color_idx, Over Range Color, DCTLUI_COMBO_BOX, 0, { OVER_RANGE_COLOR_M, OVER_RANGE_COLOR_Y, OVER_RANGE_COLOR_C }, { Magenta, Yellow, Cyan })
DEFINE_UI_PARAMS(st_luminance, Start [cd/m2], DCTLUI_SLIDER_INT, 100, 100, 500, 1)
DEFINE_UI_PARAMS(ed_luminance, End [cd/m2], DCTLUI_SLIDER_INT, 1000, 500, 10000, 1)

typedef struct{
    int x;
    int y;
} int2;


// convert Y value to the Turbo RGB value.
// The Turbo RGB value is used to create a luminance map.
__DEVICE__ float3 y_2_turbo_rgb(float y)
{
    float y_clip = _clampf(y, 0.0, (NUM_OF_TURBO_TBL - 1));
    int low_idx = int(_floorf(y_clip));
    int high_idx = int(_ceilf(y_clip));
    float low_rate = y - float(low_idx);
    float3 low_rate_f3 = to_float3(low_rate, low_rate, low_rate);
    
    float3 out;

    if(low_idx == high_idx){
        out = TURBO_TBL[low_idx];
    }
    else{
        float3 high_rgb = TURBO_TBL[high_idx];
        float3 low_rgb = TURBO_TBL[low_idx];
        out = low_rgb + (high_rgb - low_rgb) * low_rate_f3;
    }
    return out;
}


__DEVICE__ float3 draw_scale(int p_Width, int p_Height, int p_X, int p_Y, float3 rgb_in)
{
    const float st_pos_h_rate = 0.02;
    const float st_pos_v_rate = 0.05;
    const float ed_pos_h_rate = 0.05;
    const float ed_pos_v_rate = 0.95;
    const float scale_h_rate = 0.2;

    const float pq_100_cv = 0.508078421517;
    const float pq_10000_cv = 1.0;

    int2 st_pos;
    int2 ed_pos;
    st_pos.x = int(_round(st_pos_h_rate * p_Width));
    st_pos.y = int(_round(st_pos_v_rate * p_Height));
    ed_pos.x = int(_round(ed_pos_h_rate * p_Width));
    ed_pos.y = int(_round(ed_pos_v_rate * p_Height));

    float gray_cv;
    float3 out = rgb_in;

    // draw horizontal line for scale
    // float2 st_pos;
    // float2 ed_pos;


    // draw lamp pattern
    if((st_pos.x <= p_X) && (p_X < ed_pos.x)){
        if((st_pos.y <= p_Y) && (p_Y < ed_pos.y)){
            gray_cv = (float(p_Y) - st_pos.y) / (ed_pos.y - st_pos.y);
            gray_cv = (pq_10000_cv - pq_100_cv) * gray_cv + pq_100_cv;
            out.x = gray_cv;
            out.y = gray_cv;
            out.z = gray_cv;
        }
    }

    return out;
}


// main function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    const float st_luminance_linear = st_luminance / 100.0f;
    const float ed_luminance_linear = ed_luminance / 100.0f;
    const float st_luminance_pq = oetf_st2084(st_luminance_linear);
    const float ed_luminance_pq = oetf_st2084(ed_luminance_linear);
    float3 rgb_in = to_float3(p_R, p_G, p_B);

    // draw scale
    float3 rgb_with_scale = draw_scale(p_Width, p_Height, p_X, p_Y, rgb_in);

    // convert to linear
    float3 rgb_linear = eotf_st2084_f3(rgb_with_scale);

    // convert to Y
    float y;
    float mono_y = rgb_2_y(rgb_linear, gamut_idx);
    if(judge_data_idx == JUDGE_METHOD_RGB2Y){
        y = mono_y;
    }
    else if(judge_data_idx == JUDGE_METHOD_MAX_RGB){
        y = _fmaxf(_fmaxf(rgb_linear.x, rgb_linear.y), rgb_linear.z);
    }
    else{
        y = mono_y;
    }

    // convert to the luminance map data (sRGB color space)
    float3 srgb_val;
    if(y > ed_luminance_linear){ // over range
        if(over_range_color_idx == OVER_RANGE_COLOR_C){
            srgb_val = over_range_color_c_3f;
        }
        else if(over_range_color_idx == OVER_RANGE_COLOR_M){
            srgb_val = over_range_color_m_3f;
        }
        else if(over_range_color_idx == OVER_RANGE_COLOR_Y){
            srgb_val = over_range_color_y_3f;
        }
        else{
            srgb_val = over_range_color_m_3f;
        }
    }
    else if(y > st_luminance_linear){ // apply luminance map
        float y_pq = oetf_st2084(y);
        y_pq = (y_pq - st_luminance_pq) / (ed_luminance_pq - st_luminance_pq);
        srgb_val = y_2_turbo_rgb(y_pq * (NUM_OF_TURBO_TBL - 1));
    }
    else{ // convert to monochrome sRGB to improve the visibility of the SDR data.
        float3 y_f3 = to_float3(mono_y, mono_y, mono_y);
        float3 y_f3_normalized = y_f3 / st_luminance_linear;
        srgb_val = oetf_srgb_f3(y_f3_normalized);
    }

    // Convert sRGB data to the Timeline color space
    float3 linear = eotf_srgb_f3(srgb_val);
    float (*gamut_conv_matrix)[3];

    if(gamut_idx == GAMUT_IDX_BT709){
        gamut_conv_matrix = srgb_to_bt709_mtx;
    }
    else if(gamut_idx == GAMUT_IDX_P3D65){
        gamut_conv_matrix = srgb_to_p3d65_mtx;
    }
    else if(gamut_idx == GAMUT_IDX_BT2020){
        gamut_conv_matrix = srgb_to_bt2020_mtx;
    }
    else{
        gamut_conv_matrix = srgb_to_bt709_mtx;
    }
    linear = apply_matrix(linear, gamut_conv_matrix);
    
    float3 out;
    out = oetf_st2084_f3(linear);

    return out;
}
